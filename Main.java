import ITE.*;
import java.util.ArrayList;
import java.util.Scanner;
public class Main{
	public static void main(String[] args) {
		//String run   = "(!(stop)*start*!(complete))";
		//String embalador = "(sensor_prox2 * !(timer))";
		//String motor = "("+run+"*!(sensor_prox2)+timer)) * (!(sensor_tipo) * (sensor_prox + level_sensor))";
		//String luz_cheio = "((level_sensor+luz_cheio)*sensor_proximo)";
		//String solenoide_luzenchendo = "sensor_prox * !(level_sensor) * !("+luz_cheio+")";
		//String motor = run+"*(sensor_proximo+level_sensor)";
		//String solenoid  = "((sensor_proximo*!(level_sensor))*!"+luz_cheio+")";
		String m3 = "(!(stop+bemerg)*bstart*(!(sp1)+lbe)*!(alarme_cx_cheia))";
		String ms = "("+m3+"*ste)";
		String m1 = m3+"*"+ms+"*(!(sp1)+lbe)";
		String m2 = m3+"*!"+ms;
		String eg1 = "sp1*sn1";
		String [] expressionsNames = {"m3", "ms", "m1", "m2", "eg1"};
		String [] expressions = {m3, ms, m1, m2, eg1};

		ROBDD robdd;
		for(int i = 0;i<expressions.length;i++){
			System.out.println();
			System.out.println(expressionsNames[i]+" - ("+expressions[i]+")");
			robdd = new ROBDD(expressions[i]);
			robdd.setWeightingOrdering();
			//robdd.setMin();
			robdd.setWindowOrdering(4, 1);
			System.out.println("ITE: "+robdd.getITE()+" - size: "+robdd.size());
			System.out.println("Ordering:"+robdd.getOrdering());
			robdd.getAllPaths_Maped().forEach(result->{
				System.out.println(result);
			});
		}
		
		//robdd.setOrdering("SF2<SG3<SG4<SG1<SG2<SF1<");
		//robdd.setMin();
		


		/*
		robdd.setMin();
		System.out.println(robdd.size());
		System.out.println(robdd.getOrdering());
		robdd.getAllPaths().forEach(path->{
			System.out.println(path);
		});
		*/

	}
	
}


/*

 Important applications that can be mentioned for ROBDDs are: digital circuit design - minimizing the size of a ROBDD that represents a Boolean function describing a circuit transfers directly to a smaller chip area; formal verification of combinational circuits; analysis of sequential systems; symbolic model checking.
public class Main{
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		Operations op = new Operations();
		Ordering order = new Ordering();

		String expression = "(x1+x2)*(x3+x4)";
		Tree t = new Tree();
		//t.setOrdering("x[1]<x[3]<x[5]<x[7]<x[9]<x[11]<x[13]<x[15]<x[17]<x[19]<x[21]<x[23]<x[2]<x[4]<x[6]<x[8]<x[10]<x[12]<x[14]<x[16]<x[18]<x[20]<x[22]<x[24]<");
		//t.setOrdering(order.weighting(expression));
		t.setOrdering("x1<x2<x3<x4<");
		//Node root = order.getMin(expression);
		//Node root = t.generateG(expression);
		
		//Node root = order.window(expression,4,"SF2");//SF1<SF2<SG1<SG2<SG3<SG4<
		//System.out.println(root.bOrdering);
		//System.out.println(t.getOrdering());
		//System.out.println("size = "+op.count(root));
		//System.out.println(root.expression);
		Node root = order.window(expression,t.getOrdering(),3,1);//SF1<SF2<SG1<SG2<SG3<SG4<
		for (String i : t.allReducedPaths(root) ) {
			System.out.println(i);	
		}
		System.out.println(root.bOrdering);
		//System.out.println(t.getOrdering());
		System.out.println("size = "+op.count(root));
		System.out.println(root.expression);
		//System.out.println(order.weighting(expression));
	}
	
}

*/


//(∼(SF1 ∨ SF2) ∧ ∼((SG1 ∧ (SG2 ∨ SG3)) ∨ (SG2 ∧ SG3)))

//(!(SF1 + SF2) * !((SG1 * (SG2 + SG3)) + (SG2 * SG3)))*(SG3+SG4)
//(∼(SF1∨SF2)∧∼((SG1∧(SG2vSG3))∨(SG2∧SG3)))⟩.

//(!(SF1+SF2)*!((SG1*(SG2+SG3))+(SG2*SG3)))

//((((((((x[1]*x[2])+(x[3]*x[4]))+(x[5])*x[6]))+(x[7]*x[8]))+(x[9]*x[10]))+(x[11]*x[12]))+(x[13]*x[14]))
//1<3<5<7<9<11<13<2<4<6<8<10<12<14<
//((((((((x[1]*x[2])+(x[3]*x[4]))+(x[5])*x[6]))+(x[7]*x[8]))+(x[9]*x[10]))+(x[11]*x[12]))+(x[13]*x[14]))
//(x[1],(x[3],(x[5],(x[7],(x[9],(x[11],(x[13],(x[2],1,(x[4],1,(x[6],1,(x[8],1,(x[10],1,(x[12],1,(x[14],1,0))))))),(x[2],1,(x[4],1,(x[6],1,(x[8],1,(x[10],1,(x[12],1,0))))))),(x[13],(x[2],1,(x[4],1,(x[6],1,(x[8],1,(x[10],1,(x[14],1,0)))))),(x[2],1,(x[4],1,(x[6],1,(x[8],1,(x[10],1,0))))))),(x[11],(x[13],(x[2],1,(x[4],1,(x[6],1,(x[8],1,(x[12],1,(x[14],1,0)))))),(x[2],1,(x[4],1,(x[6],1,(x[8],1,(x[12],1,0)))))),(x[13],(x[2],1,(x[4],1,(x[6],1,(x[8],1,(x[14],1,0))))),(x[2],1,(x[4],1,(x[6],1,(x[8],1,0))))))),(x[9],(x[11],(x[13],(x[2],1,(x[4],1,(x[6],1,(x[10],1,(x[12],1,(x[14],1,0)))))),(x[2],1,(x[4],1,(x[6],1,(x[10],1,(x[12],1,0)))))),(x[13],(x[2],1,(x[4],1,(x[6],1,(x[10],1,(x[14],1,0))))),(x[2],1,(x[4],1,(x[6],1,(x[10],1,0)))))),(x[11],(x[13],(x[2],1,(x[4],1,(x[6],1,(x[12],1,(x[14],1,0))))),(x[2],1,(x[4],1,(x[6],1,(x[12],1,0))))),(x[13],(x[2],1,(x[4],1,(x[6],1,(x[14],1,0)))),(x[2],1,(x[4],1,(x[6],1,0))))))),(x[7],(x[9],(x[11],(x[13],(x[2],1,(x[4],1,(x[8],1,(x[10],1,(x[12],1,(x[14],1,0)))))),(x[2],1,(x[4],1,(x[8],1,(x[10],1,(x[12],1,0)))))),(x[13],(x[2],1,(x[4],1,(x[8],1,(x[10],1,(x[14],1,0))))),(x[2],1,(x[4],1,(x[8],1,(x[10],1,0)))))),(x[11],(x[13],(x[2],1,(x[4],1,(x[8],1,(x[12],1,(x[14],1,0))))),(x[2],1,(x[4],1,(x[8],1,(x[12],1,0))))),(x[13],(x[2],1,(x[4],1,(x[8],1,(x[14],1,0)))),(x[2],1,(x[4],1,(x[8],1,0)))))),(x[9],(x[11],(x[13],(x[2],1,(x[4],1,(x[10],1,(x[12],1,(x[14],1,0))))),(x[2],1,(x[4],1,(x[10],1,(x[12],1,0))))),(x[13],(x[2],1,(x[4],1,(x[10],1,(x[14],1,0)))),(x[2],1,(x[4],1,(x[10],1,0))))),(x[11],(x[13],(x[2],1,(x[4],1,(x[12],1,(x[14],1,0)))),(x[2],1,(x[4],1,(x[12],1,0)))),(x[13],(x[2],1,(x[4],1,(x[14],1,0))),(x[2],1,(x[4],1,0))))))),(x[5],(x[7],(x[9],(x[11],(x[13],(x[2],1,(x[6],1,(x[8],1,(x[10],1,(x[12],1,(x[14],1,0)))))),(x[2],1,(x[6],1,(x[8],1,(x[10],1,(x[12],1,0)))))),(x[13],(x[2],1,(x[6],1,(x[8],1,(x[10],1,(x[14],1,0))))),(x[2],1,(x[6],1,(x[8],1,(x[10],1,0)))))),(x[11],(x[13],(x[2],1,(x[6],1,(x[8],1,(x[12],1,(x[14],1,0))))),(x[2],1,(x[6],1,(x[8],1,(x[12],1,0))))),(x[13],(x[2],1,(x[6],1,(x[8],1,(x[14],1,0)))),(x[2],1,(x[6],1,(x[8],1,0)))))),(x[9],(x[11],(x[13],(x[2],1,(x[6],1,(x[10],1,(x[12],1,(x[14],1,0))))),(x[2],1,(x[6],1,(x[10],1,(x[12],1,0))))),(x[13],(x[2],1,(x[6],1,(x[10],1,(x[14],1,0)))),(x[2],1,(x[6],1,(x[10],1,0))))),(x[11],(x[13],(x[2],1,(x[6],1,(x[12],1,(x[14],1,0)))),(x[2],1,(x[6],1,(x[12],1,0)))),(x[13],(x[2],1,(x[6],1,(x[14],1,0))),(x[2],1,(x[6],1,0)))))),(x[7],(x[9],(x[11],(x[13],(x[2],1,(x[8],1,(x[10],1,(x[12],1,(x[14],1,0))))),(x[2],1,(x[8],1,(x[10],1,(x[12],1,0))))),(x[13],(x[2],1,(x[8],1,(x[10],1,(x[14],1,0)))),(x[2],1,(x[8],1,(x[10],1,0))))),(x[11],(x[13],(x[2],1,(x[8],1,(x[12],1,(x[14],1,0)))),(x[2],1,(x[8],1,(x[12],1,0)))),(x[13],(x[2],1,(x[8],1,(x[14],1,0))),(x[2],1,(x[8],1,0))))),(x[9],(x[11],(x[13],(x[2],1,(x[10],1,(x[12],1,(x[14],1,0)))),(x[2],1,(x[10],1,(x[12],1,0)))),(x[13],(x[2],1,(x[10],1,(x[14],1,0))),(x[2],1,(x[10],1,0)))),(x[11],(x[13],(x[2],1,(x[12],1,(x[14],1,0))),(x[2],1,(x[12],1,0))),(x[13],(x[2],1,(x[14],1,0)),(x[2],1,0))))))),(x[3],(x[5],(x[7],(x[9],(x[11],(x[13],(x[4],1,(x[6],1,(x[8],1,(x[10],1,(x[12],1,(x[14],1,0)))))),(x[4],1,(x[6],1,(x[8],1,(x[10],1,(x[12],1,0)))))),(x[13],(x[4],1,(x[6],1,(x[8],1,(x[10],1,(x[14],1,0))))),(x[4],1,(x[6],1,(x[8],1,(x[10],1,0)))))),(x[11],(x[13],(x[4],1,(x[6],1,(x[8],1,(x[12],1,(x[14],1,0))))),(x[4],1,(x[6],1,(x[8],1,(x[12],1,0))))),(x[13],(x[4],1,(x[6],1,(x[8],1,(x[14],1,0)))),(x[4],1,(x[6],1,(x[8],1,0)))))),(x[9],(x[11],(x[13],(x[4],1,(x[6],1,(x[10],1,(x[12],1,(x[14],1,0))))),(x[4],1,(x[6],1,(x[10],1,(x[12],1,0))))),(x[13],(x[4],1,(x[6],1,(x[10],1,(x[14],1,0)))),(x[4],1,(x[6],1,(x[10],1,0))))),(x[11],(x[13],(x[4],1,(x[6],1,(x[12],1,(x[14],1,0)))),(x[4],1,(x[6],1,(x[12],1,0)))),(x[13],(x[4],1,(x[6],1,(x[14],1,0))),(x[4],1,(x[6],1,0)))))),(x[7],(x[9],(x[11],(x[13],(x[4],1,(x[8],1,(x[10],1,(x[12],1,(x[14],1,0))))),(x[4],1,(x[8],1,(x[10],1,(x[12],1,0))))),(x[13],(x[4],1,(x[8],1,(x[10],1,(x[14],1,0)))),(x[4],1,(x[8],1,(x[10],1,0))))),(x[11],(x[13],(x[4],1,(x[8],1,(x[12],1,(x[14],1,0)))),(x[4],1,(x[8],1,(x[12],1,0)))),(x[13],(x[4],1,(x[8],1,(x[14],1,0))),(x[4],1,(x[8],1,0))))),(x[9],(x[11],(x[13],(x[4],1,(x[10],1,(x[12],1,(x[14],1,0)))),(x[4],1,(x[10],1,(x[12],1,0)))),(x[13],(x[4],1,(x[10],1,(x[14],1,0))),(x[4],1,(x[10],1,0)))),(x[11],(x[13],(x[4],1,(x[12],1,(x[14],1,0))),(x[4],1,(x[12],1,0))),(x[13],(x[4],1,(x[14],1,0)),(x[4],1,0)))))),(x[5],(x[7],(x[9],(x[11],(x[13],(x[6],1,(x[8],1,(x[10],1,(x[12],1,(x[14],1,0))))),(x[6],1,(x[8],1,(x[10],1,(x[12],1,0))))),(x[13],(x[6],1,(x[8],1,(x[10],1,(x[14],1,0)))),(x[6],1,(x[8],1,(x[10],1,0))))),(x[11],(x[13],(x[6],1,(x[8],1,(x[12],1,(x[14],1,0)))),(x[6],1,(x[8],1,(x[12],1,0)))),(x[13],(x[6],1,(x[8],1,(x[14],1,0))),(x[6],1,(x[8],1,0))))),(x[9],(x[11],(x[13],(x[6],1,(x[10],1,(x[12],1,(x[14],1,0)))),(x[6],1,(x[10],1,(x[12],1,0)))),(x[13],(x[6],1,(x[10],1,(x[14],1,0))),(x[6],1,(x[10],1,0)))),(x[11],(x[13],(x[6],1,(x[12],1,(x[14],1,0))),(x[6],1,(x[12],1,0))),(x[13],(x[6],1,(x[14],1,0)),(x[6],1,0))))),(x[7],(x[9],(x[11],(x[13],(x[8],1,(x[10],1,(x[12],1,(x[14],1,0)))),(x[8],1,(x[10],1,(x[12],1,0)))),(x[13],(x[8],1,(x[10],1,(x[14],1,0))),(x[8],1,(x[10],1,0)))),(x[11],(x[13],(x[8],1,(x[12],1,(x[14],1,0))),(x[8],1,(x[12],1,0))),(x[13],(x[8],1,(x[14],1,0)),(x[8],1,0)))),(x[9],(x[11],(x[13],(x[10],1,(x[12],1,(x[14],1,0))),(x[10],1,(x[12],1,0))),(x[13],(x[10],1,(x[14],1,0)),(x[10],1,0))),(x[11],(x[13],(x[12],1,(x[14],1,0)),(x[12],1,0)),(x[13],(x[14],1,0),0)))))))
//(x[1],(x[3],(x[5],(x[7],(x[9],(x[11],(x[13],(x[2],1,(x[4],1,(x[6],1,(x[8],1,(x[10],1,(x[12],1,(x[14],1,0))))))),(x[2],1,(x[4],1,(x[6],1,(x[8],1,(x[10],1,(x[12],1,0))))))),(x[13],(x[2],1,(x[4],1,(x[6],1,(x[8],1,(x[10],1,(x[14],1,0)))))),(x[2],1,(x[4],1,(x[6],1,(x[8],1,(x[10],1,0))))))),(x[11],(x[13],(x[2],1,(x[4],1,(x[6],1,(x[8],1,(x[12],1,(x[14],1,0)))))),(x[2],1,(x[4],1,(x[6],1,(x[8],1,(x[12],1,0)))))),(x[13],(x[2],1,(x[4],1,(x[6],1,(x[8],1,(x[14],1,0))))),(x[2],1,(x[4],1,(x[6],1,(x[8],1,0))))))),(x[9],(x[11],(x[13],(x[2],1,(x[4],1,(x[6],1,(x[10],1,(x[12],1,(x[14],1,0)))))),(x[2],1,(x[4],1,(x[6],1,(x[10],1,(x[12],1,0)))))),(x[13],(x[2],1,(x[4],1,(x[6],1,(x[10],1,(x[14],1,0))))),(x[2],1,(x[4],1,(x[6],1,(x[10],1,0)))))),(x[11],(x[13],(x[2],1,(x[4],1,(x[6],1,(x[12],1,(x[14],1,0))))),(x[2],1,(x[4],1,(x[6],1,(x[12],1,0))))),(x[13],(x[2],1,(x[4],1,(x[6],1,(x[14],1,0)))),(x[2],1,(x[4],1,(x[6],1,0))))))),(x[7],(x[9],(x[11],(x[13],(x[2],1,(x[4],1,(x[8],1,(x[10],1,(x[12],1,(x[14],1,0)))))),(x[2],1,(x[4],1,(x[8],1,(x[10],1,(x[12],1,0)))))),(x[13],(x[2],1,(x[4],1,(x[8],1,(x[10],1,(x[14],1,0))))),(x[2],1,(x[4],1,(x[8],1,(x[10],1,0)))))),(x[11],(x[13],(x[2],1,(x[4],1,(x[8],1,(x[12],1,(x[14],1,0))))),(x[2],1,(x[4],1,(x[8],1,(x[12],1,0))))),(x[13],(x[2],1,(x[4],1,(x[8],1,(x[14],1,0)))),(x[2],1,(x[4],1,(x[8],1,0)))))),(x[9],(x[11],(x[13],(x[2],1,(x[4],1,(x[10],1,(x[12],1,(x[14],1,0))))),(x[2],1,(x[4],1,(x[10],1,(x[12],1,0))))),(x[13],(x[2],1,(x[4],1,(x[10],1,(x[14],1,0)))),(x[2],1,(x[4],1,(x[10],1,0))))),(x[11],(x[13],(x[2],1,(x[4],1,(x[12],1,(x[14],1,0)))),(x[2],1,(x[4],1,(x[12],1,0)))),(x[13],(x[2],1,(x[4],1,(x[14],1,0))),(x[2],1,(x[4],1,0))))))),(x[5],(x[7],(x[9],(x[11],(x[13],(x[2],1,(x[6],1,(x[8],1,(x[10],1,(x[12],1,(x[14],1,0)))))),(x[2],1,(x[6],1,(x[8],1,(x[10],1,(x[12],1,0)))))),(x[13],(x[2],1,(x[6],1,(x[8],1,(x[10],1,(x[14],1,0))))),(x[2],1,(x[6],1,(x[8],1,(x[10],1,0)))))),(x[11],(x[13],(x[2],1,(x[6],1,(x[8],1,(x[12],1,(x[14],1,0))))),(x[2],1,(x[6],1,(x[8],1,(x[12],1,0))))),(x[13],(x[2],1,(x[6],1,(x[8],1,(x[14],1,0)))),(x[2],1,(x[6],1,(x[8],1,0)))))),(x[9],(x[11],(x[13],(x[2],1,(x[6],1,(x[10],1,(x[12],1,(x[14],1,0))))),(x[2],1,(x[6],1,(x[10],1,(x[12],1,0))))),(x[13],(x[2],1,(x[6],1,(x[10],1,(x[14],1,0)))),(x[2],1,(x[6],1,(x[10],1,0))))),(x[11],(x[13],(x[2],1,(x[6],1,(x[12],1,(x[14],1,0)))),(x[2],1,(x[6],1,(x[12],1,0)))),(x[13],(x[2],1,(x[6],1,(x[14],1,0))),(x[2],1,(x[6],1,0)))))),(x[7],(x[9],(x[11],(x[13],(x[2],1,(x[8],1,(x[10],1,(x[12],1,(x[14],1,0))))),(x[2],1,(x[8],1,(x[10],1,(x[12],1,0))))),(x[13],(x[2],1,(x[8],1,(x[10],1,(x[14],1,0)))),(x[2],1,(x[8],1,(x[10],1,0))))),(x[11],(x[13],(x[2],1,(x[8],1,(x[12],1,(x[14],1,0)))),(x[2],1,(x[8],1,(x[12],1,0)))),(x[13],(x[2],1,(x[8],1,(x[14],1,0))),(x[2],1,(x[8],1,0))))),(x[9],(x[11],(x[13],(x[2],1,(x[10],1,(x[12],1,(x[14],1,0)))),(x[2],1,(x[10],1,(x[12],1,0)))),(x[13],(x[2],1,(x[10],1,(x[14],1,0))),(x[2],1,(x[10],1,0)))),(x[11],(x[13],(x[2],1,(x[12],1,(x[14],1,0))),(x[2],1,(x[12],1,0))),(x[13],(x[2],1,(x[14],1,0)),(x[2],1,0))))))),(x[3],(x[5],(x[7],(x[9],(x[11],(x[13],(x[4],1,(x[6],1,(x[8],1,(x[10],1,(x[12],1,(x[14],1,0)))))),(x[4],1,(x[6],1,(x[8],1,(x[10],1,(x[12],1,0)))))),(x[13],(x[4],1,(x[6],1,(x[8],1,(x[10],1,(x[14],1,0))))),(x[4],1,(x[6],1,(x[8],1,(x[10],1,0)))))),(x[11],(x[13],(x[4],1,(x[6],1,(x[8],1,(x[12],1,(x[14],1,0))))),(x[4],1,(x[6],1,(x[8],1,(x[12],1,0))))),(x[13],(x[4],1,(x[6],1,(x[8],1,(x[14],1,0)))),(x[4],1,(x[6],1,(x[8],1,0)))))),(x[9],(x[11],(x[13],(x[4],1,(x[6],1,(x[10],1,(x[12],1,(x[14],1,0))))),(x[4],1,(x[6],1,(x[10],1,(x[12],1,0))))),(x[13],(x[4],1,(x[6],1,(x[10],1,(x[14],1,0)))),(x[4],1,(x[6],1,(x[10],1,0))))),(x[11],(x[13],(x[4],1,(x[6],1,(x[12],1,(x[14],1,0)))),(x[4],1,(x[6],1,(x[12],1,0)))),(x[13],(x[4],1,(x[6],1,(x[14],1,0))),(x[4],1,(x[6],1,0)))))),(x[7],(x[9],(x[11],(x[13],(x[4],1,(x[8],1,(x[10],1,(x[12],1,(x[14],1,0))))),(x[4],1,(x[8],1,(x[10],1,(x[12],1,0))))),(x[13],(x[4],1,(x[8],1,(x[10],1,(x[14],1,0)))),(x[4],1,(x[8],1,(x[10],1,0))))),(x[11],(x[13],(x[4],1,(x[8],1,(x[12],1,(x[14],1,0)))),(x[4],1,(x[8],1,(x[12],1,0)))),(x[13],(x[4],1,(x[8],1,(x[14],1,0))),(x[4],1,(x[8],1,0))))),(x[9],(x[11],(x[13],(x[4],1,(x[10],1,(x[12],1,(x[14],1,0)))),(x[4],1,(x[10],1,(x[12],1,0)))),(x[13],(x[4],1,(x[10],1,(x[14],1,0))),(x[4],1,(x[10],1,0)))),(x[11],(x[13],(x[4],1,(x[12],1,(x[14],1,0))),(x[4],1,(x[12],1,0))),(x[13],(x[4],1,(x[14],1,0)),(x[4],1,0)))))),(x[5],(x[7],(x[9],(x[11],(x[13],(x[6],1,(x[8],1,(x[10],1,(x[12],1,(x[14],1,0))))),(x[6],1,(x[8],1,(x[10],1,(x[12],1,0))))),(x[13],(x[6],1,(x[8],1,(x[10],1,(x[14],1,0)))),(x[6],1,(x[8],1,(x[10],1,0))))),(x[11],(x[13],(x[6],1,(x[8],1,(x[12],1,(x[14],1,0)))),(x[6],1,(x[8],1,(x[12],1,0)))),(x[13],(x[6],1,(x[8],1,(x[14],1,0))),(x[6],1,(x[8],1,0))))),(x[9],(x[11],(x[13],(x[6],1,(x[10],1,(x[12],1,(x[14],1,0)))),(x[6],1,(x[10],1,(x[12],1,0)))),(x[13],(x[6],1,(x[10],1,(x[14],1,0))),(x[6],1,(x[10],1,0)))),(x[11],(x[13],(x[6],1,(x[12],1,(x[14],1,0))),(x[6],1,(x[12],1,0))),(x[13],(x[6],1,(x[14],1,0)),(x[6],1,0))))),(x[7],(x[9],(x[11],(x[13],(x[8],1,(x[10],1,(x[12],1,(x[14],1,0)))),(x[8],1,(x[10],1,(x[12],1,0)))),(x[13],(x[8],1,(x[10],1,(x[14],1,0))),(x[8],1,(x[10],1,0)))),(x[11],(x[13],(x[8],1,(x[12],1,(x[14],1,0))),(x[8],1,(x[12],1,0))),(x[13],(x[8],1,(x[14],1,0)),(x[8],1,0)))),(x[9],(x[11],(x[13],(x[10],1,(x[12],1,(x[14],1,0))),(x[10],1,(x[12],1,0))),(x[13],(x[10],1,(x[14],1,0)),(x[10],1,0))),(x[11],(x[13],(x[12],1,(x[14],1,0)),(x[12],1,0)),(x[13],(x[14],1,0),0)))))))

//(((((((((((((x[1]*x[2])+(x[3]*x[4]))+(x[5])*x[6]))+(x[7]*x[8]))+(x[9]*x[10]))+(x[11]*x[12]))+(x[13]*x[14])))+(x[15]*x[16]))+(x[17]*x[18]))+(x[19]*x[20]))+(x[21]*x[22]))+(x[23]*x[24])

